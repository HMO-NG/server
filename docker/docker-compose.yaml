name: hmo-app
services:
  db:
    image: mysql:8.4.2
    ports:
      - '3306:3306'
    networks:
      - private
    environment:
      MYSQL_DATABASE: hmo
      MYSQL_USER: mysql
      # mysql already have _FILE implemented and is useful for sensitive values
      MYSQL_PASSWORD_FILE: /run/secrets/mysql_password
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mysql_root_password
    secrets:
      - mysql_password
      - mysql_root_password
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h localhost -u root -p$(< /run/secrets/mysql_root_password)"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - mysql_data:/var/lib/mysql

  express-server:
    restart: on-failure
#    image: your docker image tag name here and remove build props only needed in dev not prod
    build:
      context: ..
      dockerfile: Dockerfile
    # you don't need to expose anymore since nginx is setup below
#    ports:
#      - 9000:3000
    networks:
      - private
      - public
    depends_on:
       db:
         condition: service_healthy
    environment:
      NODE_ENV: production
      DB_PORT: 3306
      DB_CLIENT: mysql2
      DB_NAME: hmo
      DB_HOST: db
      DB_USER: mysql
      # You have to implement your own _FILE implementation for sensitive values, I have done that already for db atleast (:
      DB_PASSWORD_FILE: /run/secrets/mysql_password
      # not secure way ):
#      DB_PASSWORD: mysql
      SESSION_KEY: z45r.l90-2
      JWT_TOKEN_SECRET: uj00932(&*);,w35#$o9lkal;[]
    secrets:
      - mysql_password
      - source: mysql_password
        target: /mysql_password.txt
    healthcheck:
      test: [ "CMD-SHELL", "curl --silent --fail http://localhost:3000/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  migrate:
    image: curlimages/curl:8.9.1
    networks:
      - private
    depends_on:
      express-server:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      echo 'Waiting for API to be ready...' &&
      while ! curl --silent --fail http://express-server:3000/health; do
        sleep 5;
      done &&
      echo ' API is ready. Running migrations...' &&
      curl --silent --fail http://express-server:3000/migrate"

  nginx:
    image: nginx:alpine3.19
    networks:
      - public
    ports:
      - '8080:8080'
    configs:
      - source: nginx_conf
        target: /etc/nginx/nginx.conf
    depends_on:
      express-server:
        condition: service_healthy

secrets:
  mysql_password:
    file: secrets/mysql/mysql_password.txt
  mysql_root_password:
    file: secrets/mysql/mysql_root_password.txt

configs:
  nginx_conf:
    file: nginx/nginx.conf

networks:
  # custom networking in case you need it (:
  private:
    ipam:
      config:
        - gateway: '10.0.0.1'
          subnet: '10.0.0.0/19'
  public:

volumes:
  mysql_data:
#    driver: local
#    driver_opts:
#      type: none
#      device: /path/in/your/vps/dir
#      o: bind